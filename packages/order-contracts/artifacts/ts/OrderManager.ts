/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as OrderManagerContractJson } from "../OrderManager.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace OrderManagerTypes {
  export type Fields = {
    price: bigint;
    owner: Address;
    minDuration: bigint;
    maxDuration: bigint;
  };

  export type State = ContractState<Fields>;

  export type WithdrawEvent = ContractEvent<{
    who: Address;
    amount: bigint;
    when: bigint;
  }>;
  export type SubscribeEvent = ContractEvent<{
    who: Address;
    amount: bigint;
    when: bigint;
    duration: bigint;
  }>;

  export interface CallMethodTable {
    getPrice: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  OrderManagerInstance,
  OrderManagerTypes.Fields
> {
  encodeFields(fields: OrderManagerTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as OrderManagerTypes.Fields;
  }

  eventIndex = { Withdraw: 0, Subscribe: 1 };
  consts = { ErrorCodes: { Forbidden: BigInt(0), InvalidDuration: BigInt(1) } };

  at(address: string): OrderManagerInstance {
    return new OrderManagerInstance(address);
  }

  tests = {
    subscribe: async (
      params: TestContractParamsWithoutMaps<
        OrderManagerTypes.Fields,
        { duration: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "subscribe", params);
    },
    withdraw: async (
      params: TestContractParamsWithoutMaps<
        OrderManagerTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdraw", params);
    },
    getPrice: async (
      params: Omit<
        TestContractParamsWithoutMaps<OrderManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getPrice", params);
    },
    setPrice: async (
      params: TestContractParamsWithoutMaps<
        OrderManagerTypes.Fields,
        { newPrice: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setPrice", params);
    },
    setOwner: async (
      params: TestContractParamsWithoutMaps<
        OrderManagerTypes.Fields,
        { newOwner: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setOwner", params);
    },
    setMinDuration: async (
      params: TestContractParamsWithoutMaps<
        OrderManagerTypes.Fields,
        { newMinDuration: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setMinDuration", params);
    },
    setMaxDuration: async (
      params: TestContractParamsWithoutMaps<
        OrderManagerTypes.Fields,
        { newMaxDuration: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setMaxDuration", params);
    },
  };
}

// Use this object to test and deploy the contract
export const OrderManager = new Factory(
  Contract.fromJson(
    OrderManagerContractJson,
    "",
    "90aa7eba60d213fb4b15b6aebeb800b04465dfb99c5df1dd98c8f5e61ce26b6b",
    []
  )
);

// Use this class to interact with the blockchain
export class OrderManagerInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<OrderManagerTypes.State> {
    return fetchContractState(OrderManager, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeWithdrawEvent(
    options: EventSubscribeOptions<OrderManagerTypes.WithdrawEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      OrderManager.contract,
      this,
      options,
      "Withdraw",
      fromCount
    );
  }

  subscribeSubscribeEvent(
    options: EventSubscribeOptions<OrderManagerTypes.SubscribeEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      OrderManager.contract,
      this,
      options,
      "Subscribe",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      OrderManagerTypes.WithdrawEvent | OrderManagerTypes.SubscribeEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      OrderManager.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    getPrice: async (
      params?: OrderManagerTypes.CallMethodParams<"getPrice">
    ): Promise<OrderManagerTypes.CallMethodResult<"getPrice">> => {
      return callMethod(
        OrderManager,
        this,
        "getPrice",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends OrderManagerTypes.MultiCallParams>(
    calls: Calls
  ): Promise<OrderManagerTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      OrderManager,
      this,
      calls,
      getContractByCodeHash
    )) as OrderManagerTypes.MultiCallResults<Calls>;
  }
}
