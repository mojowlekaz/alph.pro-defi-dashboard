/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as RandomNumberGeneratorContractJson } from "../randomNumberGenerator/RandomNumberGenerator.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace RandomNumberGeneratorTypes {
  export type Fields = {
    randomHash: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getRandomNumber: {
      params: CallContractParams<{ userHash_: HexString }>;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  RandomNumberGeneratorInstance,
  RandomNumberGeneratorTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as RandomNumberGeneratorTypes.Fields;
  }

  at(address: string): RandomNumberGeneratorInstance {
    return new RandomNumberGeneratorInstance(address);
  }

  tests = {
    getRandomNumber: async (
      params: TestContractParams<
        RandomNumberGeneratorTypes.Fields,
        { userHash_: HexString }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getRandomNumber", params);
    },
  };
}

// Use this object to test and deploy the contract
export const RandomNumberGenerator = new Factory(
  Contract.fromJson(
    RandomNumberGeneratorContractJson,
    "",
    "18634f0c26e9de3cc81d5d3a7654ab990a2a2b2ac187e02df1fe551828fef5e3"
  )
);

// Use this class to interact with the blockchain
export class RandomNumberGeneratorInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<RandomNumberGeneratorTypes.State> {
    return fetchContractState(RandomNumberGenerator, this);
  }

  methods = {
    getRandomNumber: async (
      params: RandomNumberGeneratorTypes.CallMethodParams<"getRandomNumber">
    ): Promise<
      RandomNumberGeneratorTypes.CallMethodResult<"getRandomNumber">
    > => {
      return callMethod(
        RandomNumberGenerator,
        this,
        "getRandomNumber",
        params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends RandomNumberGeneratorTypes.MultiCallParams>(
    calls: Calls
  ): Promise<RandomNumberGeneratorTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      RandomNumberGenerator,
      this,
      calls,
      getContractByCodeHash
    )) as RandomNumberGeneratorTypes.MultiCallResults<Calls>;
  }
}
